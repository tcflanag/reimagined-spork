{"version":3,"file":"angular-fittext.umd.min.js","sources":["~/angular-fittext/src/angular-fittext.directive.ts","~/angular-fittext/src/angular-fittext.module.ts"],"sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  Renderer2,\n  ElementRef,\n  Input,\n  HostListener,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nexport class AngularFittextDirective implements AfterViewInit, OnInit, OnChanges {\n\n   fittext?= true;\n   compression?= 1;\n   activateOnResize?= true;\n   minFontSize?: number | 'inherit' = 0;\n   maxFontSize?: number | 'inherit' = Number.POSITIVE_INFINITY;\n   delay?= 100;\n   ngModel;\nprivate fittextParent: HTMLElement;\nprivate fittextElement: HTMLElement;\nprivate fittextMinFontSize: number;\nprivate fittextMaxFontSize: number;\nprivate computed: CSSStyleDeclaration;\nprivate newlines: number;\nprivate lineHeight: string;\nprivate display: string;\nprivate calcSize = 10;\nprivate resizeTimeout: number;\n/**\n * @param {?} el\n * @param {?} renderer\n */\nconstructor(\nprivate el: ElementRef,\nprivate renderer: Renderer2,\n  ) {\n    this.fittextElement = el.nativeElement;\n    this.fittextParent = this.fittextElement.parentElement;\n    this.computed = window.getComputedStyle(this.fittextElement);\n    this.newlines = this.fittextElement.childElementCount > 0 ? this.fittextElement.childElementCount : 1;\n    this.lineHeight = this.computed['line-height'];\n    this.display = this.computed['display'];\n  }\npublic onWindowResize = (): void => {\n    if (this.activateOnResize) {\n      this.setFontSize();\n    }\n  }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    this.fittextMinFontSize = this.minFontSize === 'inherit' ? this.computed['font-size'] : this.minFontSize;\n    this.fittextMaxFontSize = this.maxFontSize === 'inherit' ? this.computed['font-size'] : this.maxFontSize;\n  }\n/**\n * @return {?}\n */\npublic ngAfterViewInit() {\n    this.setFontSize();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\npublic ngOnChanges(changes: SimpleChanges) {\n    if (changes['compression'] && !changes['compression'].firstChange) {\n      this.setFontSize();\n    }\n    if (changes['ngModel']) {\n      this.fittextElement.innerHTML = this.ngModel;\n      this.setFontSize();\n    }\n  }\nprivate setFontSize = (): void => {\n    this.resizeTimeout = setTimeout(\n      (() => {\n        if (this.fittextElement.offsetHeight * this.fittextElement.offsetWidth !== 0) {\n          // reset to default\n          this.setStyles(this.calcSize, 1, 'inline-block');\n          // set new\n          this.setStyles(this.calculateNewFontSize(), this.lineHeight, this.display);\n        }\n      }).bind(this),\n      this.delay\n    );\n  }\nprivate calculateNewFontSize = (): number => {\n    const /** @type {?} */ ratio = (this.calcSize * this.newlines) / this.fittextElement.offsetWidth / this.newlines;\n\n    return Math.max(\n      Math.min(\n        (this.fittextParent.offsetWidth -\n          (parseFloat(getComputedStyle(this.fittextParent).paddingLeft) +\n            parseFloat(getComputedStyle(this.fittextParent).paddingRight)) -\n          6) *\n        ratio *\n        this.compression,\n        this.fittextMaxFontSize\n      ),\n      this.fittextMinFontSize\n    );\n  }\nprivate setStyles = (fontSize: number, lineHeight: number | string, display: string): void => {\n    this.renderer.setStyle(this.fittextElement, 'fontSize', fontSize.toString() + 'px');\n    this.renderer.setStyle(this.fittextElement, 'lineHeight', lineHeight.toString());\n    this.renderer.setStyle(this.fittextElement, 'display', display);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[fittext]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fittext': [{ type: Input },],\n'compression': [{ type: Input },],\n'activateOnResize': [{ type: Input },],\n'minFontSize': [{ type: Input },],\n'maxFontSize': [{ type: Input },],\n'delay': [{ type: Input },],\n'ngModel': [{ type: Input },],\n'onWindowResize': [{ type: HostListener, args: ['window:resize', ] },],\n};\n}\n\nfunction AngularFittextDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularFittextDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularFittextDirective.ctorParameters;\n/** @type {?} */\nAngularFittextDirective.propDecorators;\n/** @type {?} */\nAngularFittextDirective.prototype.fittext;\n/** @type {?} */\nAngularFittextDirective.prototype.compression;\n/** @type {?} */\nAngularFittextDirective.prototype.activateOnResize;\n/** @type {?} */\nAngularFittextDirective.prototype.minFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.maxFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.delay;\n/** @type {?} */\nAngularFittextDirective.prototype.ngModel;\n/** @type {?} */\nAngularFittextDirective.prototype.fittextParent;\n/** @type {?} */\nAngularFittextDirective.prototype.fittextElement;\n/** @type {?} */\nAngularFittextDirective.prototype.fittextMinFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.fittextMaxFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.computed;\n/** @type {?} */\nAngularFittextDirective.prototype.newlines;\n/** @type {?} */\nAngularFittextDirective.prototype.lineHeight;\n/** @type {?} */\nAngularFittextDirective.prototype.display;\n/** @type {?} */\nAngularFittextDirective.prototype.calcSize;\n/** @type {?} */\nAngularFittextDirective.prototype.resizeTimeout;\n/** @type {?} */\nAngularFittextDirective.prototype.onWindowResize;\n/** @type {?} */\nAngularFittextDirective.prototype.setFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.calculateNewFontSize;\n/** @type {?} */\nAngularFittextDirective.prototype.setStyles;\n/** @type {?} */\nAngularFittextDirective.prototype.el;\n/** @type {?} */\nAngularFittextDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nimport { NgModule } from '@angular/core';\nimport { AngularFittextDirective } from './angular-fittext.directive';\nexport class AngularFittextModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        AngularFittextDirective,\n    ],\n    exports: [\n        AngularFittextDirective,\n    ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AngularFittextModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularFittextModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAngularFittextModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["AngularFittextDirective","el","renderer","_this","this","fittext","compression","activateOnResize","minFontSize","maxFontSize","Number","POSITIVE_INFINITY","delay","calcSize","onWindowResize","setFontSize","resizeTimeout","setTimeout","fittextElement","offsetHeight","offsetWidth","setStyles","calculateNewFontSize","lineHeight","display","bind","ratio","newlines","Math","max","min","fittextParent","parseFloat","getComputedStyle","paddingLeft","paddingRight","fittextMaxFontSize","fittextMinFontSize","fontSize","setStyle","toString","nativeElement","parentElement","computed","window","childElementCount","prototype","ngOnInit","ngAfterViewInit","ngOnChanges","changes","firstChange","innerHTML","ngModel","decorators","type","Directive","args","selector","ctorParameters","ElementRef","Renderer2","propDecorators","Input","HostListener","AngularFittextModule","NgModule","declarations","exports"],"mappings":"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"}
